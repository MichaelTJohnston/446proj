% Code by Michael Johnston, Valeria Salazar, Bryan Num, Chris Barta
% AERO 446 Project

%% housekeeping
clear; % Clears workspace
clc; %clears command window
close all;

%% -- Constants --
c = 299.8E6; % Speed of light [m/s]
hOrbit = 200; % Height of orbit [km]
muMoon = 4904.8695; % Gravitational constant of Moon [km^3/s^2]
rMoon = 1737.1; % Radius of Moon [km]
EMdist = 406700E3; % Max distance from Earth to Moon [m]

%% -- Orbit parameters --
T = 2*pi*sqrt((hOrbit+rMoon)^3/muMoon); % Period of orbit [s]
w = 2*pi/T; % Angular velocity [rad/s]
thetaEclipse = acos(rMoon/(hOrbit+rMoon));
tEclipse = [thetaEclipse wrapTo2Pi(-thetaEclipse)]/w; % Time range in eclipse [s]
tSun = (tEclipse(2) - tEclipse(1)); % Time in sun [s]
orbits = 24*3600/T; % Orbits per day

%% -- Solar panels --
U = 0.10; % Cube sat "Unit" [m]
APanel = 3*U*2*U; % Area of solar panels [m^2]
Fsun = 1366; % Solar flux [W/m^2]
effPanel = 0.3; % Efficiency of panel
pDens = 0.8; % Panel density
effTemp = 0.5/100; % Degredation of panel efficiency due to temp
effTime = 2.5/100; % Degredation of panel efficiency due to time [%/yr]
opTime = 3; % Operational time [yrs]
Tsol = 40; % Temperature of panels [?C]
panelDens = 80/100; % Density of solar panels

%% --Body Mounted Solar Panels

effEoL = pDens*effPanel*(1 - effTemp*(Tsol - 28))*(1 - effTime)^opTime;  %end of life efficiency

% case where sensor points and s/c rotates
syms t
PgenFixed = @(t) 2*Fsun*APanel*effEoL*sin(w*t); % Power generated by fixed panels (oriented normal) [W]

% case where s/c is oriented at 45 degrees and doesn't rotate
PgenFixed45 = cosd(45)*PgenFixed(pi/2/w); % Power generated by fixe panels (oriented 45deg) [W]
eGenFixed45 = PgenFixed45*tSun/3600*orbits; % [W.hr/day]


%% Power generated by tracking panels [W]
pGenTracking = 2*Fsun*effEoL*APanel*0.8; % [W] power generated by the panels 
EgenTracking = (pGenTracking*tSun*orbits)/3600; % Energy generated by tracking panels per day [W.hr]

% -- Power consumed by... --
% -Radio
rxPower = 5.5; % Power CONSUMED by radio during receive only [W]
rxTxPower = 35; % Power CONSUMED by radio during transmit/recieve [W]
maxTxPowerOut = 3.8; % Max power output by transmitter [W]

% -ACS (varies?)
pACS = [2 3]; % Power consumed by ACS (average) [w]

% -Computer
pCPU = [1.6 2.85]; % Power consumed by computer [W]

% -Sensor
pSens = 40; % Power consumed by sensor during science gathering [w]
pSens_sby = 2; % Power consumed by sensor in stand-by [w]
rSens = 100E3; % Data rate of sensor during operations [bps]

%% -- Power Consumption Modes
% Idle power consumed [W]
margin = 0.2; % 20% Margin on power consumed
pModeIdle = (pCPU(1) + rxPower + pSens_sby + pACS(1)); 
% Comms only power consumed [W]
pModeComms = (pACS(2) + pCPU(1) + pSens_sby + rxTxPower); 
% Power generation
pModeGen = pModeIdle; % Power consumed during power generation
% Science gathering (always gather in eclipse?)
pModeSci = (pSens + pCPU(2) + pACS(2) + rxPower);

%% --

fRange = linspace(8.400, 8.450)'*1E9; % X-Band frequency range [Hz]
commTime = 2*3600; % Total required comm time per day [s]

diaG = 20; % Diameter of ground antenna [m]
diaScFixed = 20E-2; % Diameter of FIXED spacecraft antenna (low-cost) [m]
diaScDep = 50E-2; % Diameter of DEPLOYABLE spacecraft antenna (high-cost) [m]

Ts = 10*log10(150); % System temperature noise [dB]
Ll = 5; % Line losses [dB]
EbNoMin = 3 + 5; % Link budget plus margin for Reed-Solomon encoding[dB]
Latm = 0; % Atmospheric losses ASSUMING ZERO [dB]
Lpt = 0; % Pointing losses [dB]

%% -- dB Equations --
G = @(D,f) 20*log10(f*1E-9) + 20*log10(D) + 17.8; % Parabolic antenna gain [dB]
Ls = @(dist,f) 20*log10(dist) + 20*log10(f) - 147.55; % Path loss [dB]
beamWid = @(D,f) 65.3*c./f/D; % Parabolic antenna beam width equation [degrees]
Lpoint = @(err,beamWid) 12*(err./beamWid).^2; % Pointing error equation [dB]

%% Solving for max data rate that meets link budget
fTx = fRange(1); % Transmit frequency
syms dRate
linkEqFixed = EbNoMin == 10*log10(maxTxPowerOut) - Ls(EMdist,fTx) + G(diaG,fTx)...
	+ G(diaScFixed,fTx) + 228.6 - Ts - 10*log10(dRate) - Ll;
linkEqDep = EbNoMin == 10*log10(maxTxPowerOut) - Ls(EMdist,fTx) + G(diaG,fTx)...
	+ G(diaScDep,fTx) + 228.6 - Ts - 10*log10(dRate) - Ll;

dRateMaxfixed = double(solve(linkEqFixed,dRate));  % Max data rate that meets link budget [bps]
dRateMaxDep = double(solve(linkEqDep,dRate));  % Max data rate that meets link budget [db]

%% Energy for fixed and track with science per day (outdated, use plots)

% Fixed Panels
nfixed = 2; % number orbits collecting science 
ntx = nfixed * ((T*100000) / (tSun*dRateMaxfixed)); % orbits transmiting
ntotal = orbits;
ttxFixed = ntx*tSun; % [s] time it takes to transmit
ngen1 = floor(orbits) - nfixed; % orbits generating power when doing science
ngen2 = floor(orbits) - ntx; % orbits generating power when transmitting

Esci_fixed = nfixed * double(PgenFixed45*int(cos(w*t),t,0,tSun) - T*pModeSci*(1.2)); %  energy used in one orbit for data collection 
Etx_fixed = -ntx*tSun*pModeComms*(1.2); % energy for transmitting data

Egen_fixed1 = ngen1 * (PgenFixed45*tSun  - T*pModeIdle*(1.2)); % energy generated by panels  
Egen_fixed2 = ngen2 * (PgenFixed45*tSun  - T*pModeIdle*(1.2)); % energy generated when transmitting

Eday_fixed = double((Esci_fixed + Etx_fixed + Egen_fixed1 + Egen_fixed2)/3600); % [W.hr] net energy gained/loss

% Tracking Panels 
ntrack = 3; % number of orbits collecting science 
ntx = ntrack * ((T*100000) / (tSun*dRateMaxDep)); % 
ttxDep = ntx*tSun; % time to transmit for tracking panels 
ngen = floor(orbits) - ceil(ntx) - ntrack; 
Esci_track = ntrack * ( (tSun*pGenTracking) - (T*pModeSci)); %[W] power used for science
Etx_track = ntx * tSun * (pGenTracking - pModeComms); % energy used in one orbit for data collection 
Egen_track = ngen * (tSun*pGenTracking - T*pModeIdle); % energy generated in a day

Eday_track = (Esci_track + Etx_track + Egen_track)/3600; % [W.hr] net energy gained/loss

%% Plots 
% -- High cost plots --
% Power Generation
pTracking.pIn = pTime(pGenTracking,T,tEclipse,24*3600, 1:ceil(orbits)); % Power generated from panels
pTracking.sciOut = -pTime(pModeSci,T,0,24*3600, 1:ntrack); % power consumed during science collection
pTracking.idleOut = -pTime(pModeIdle,T,0, 24*3600,[ntrack+1:4 6:ceil(orbits)],true) -...
	pTime(pModeIdle,T,[tEclipse(1) tEclipse(1)+ttxDep],24*3600, 5,true); % Power consumed during idle 
pTracking.txOut = -pTime(pModeComms,T,[tEclipse(1) tEclipse(1)+ttxDep],24*3600, 5); % Power consumed during communication

figure
plot(pTracking.pIn(:,1), [pTracking.pIn(:,2), pTracking.sciOut(:,2), pTracking.idleOut(:,2),...
	pTracking.txOut(:,2)], 'lineWidth', 2)
grid on
title('Power Generation for High-Cost Spacecraft (24 hrs)')
xlabel('Time (min)'), ylabel('Power (W)')
legend('Solar Panels','Science','Idle','Transmission', 'location', 'southeast')

% -- Low-cost Science Day
pFixed.sciDay.sciOut = pTime(pModeSci,T,0,24*3600, 1:nfixed); % Power consumed during science collection
pFixed.sciDay.sciIn = pTime(PgenFixed,T,tEclipse,24*3600, 1:nfixed); % Power generated during science
pFixed.sciDay.genIn = pTime(PgenFixed45,T,tEclipse,24*3600, 3:ceil(orbits)); % Power in during generation
pFixed.sciDay.genOut = pTime(pModeIdle,T,0,24*3600, 3:ceil(orbits));

figure
plot(pFixed.sciDay.sciOut(:,1), [-pFixed.sciDay.sciOut(:,2),pFixed.sciDay.sciIn(:,2)...
	-pFixed.sciDay.genOut(:,2),pFixed.sciDay.genIn(:,2)], 'lineWidth', 2)
grid on
title('Power for Low-Cost Spacecraft - Science Day (24 Hours)')
xlabel('TIme (s)'), ylabel('Power (W)')
legend('Science', 'Solar Panels (Science Orientaiton)', 'Idle', 'Solar Panels (Power Gen Orientation)', 'location', 'southeast')

% -- Low-cost Transmit Day
pFixed.txDay.txOut = -pTime(pModeComms,T,[tEclipse(1) tEclipse(1)+ttxDep],24*3600, 1);% Power consumed during transmit orbit
pFixed.txDay.genIn = pTime(PgenFixed45,T,tEclipse,24*3600, 2:ceil(orbits)); % Power in during generation
pFixed.txDay.genOut = -pTime(pModeIdle,T,0,24*3600, 2:ceil(orbits))...
	-  pTime(pModeIdle,T,[tEclipse(1) tEclipse(1)+ttxDep],24*3600, 1,true);

figure
plot(pFixed.txDay.genIn(:,1), [pFixed.txDay.txOut(:,2), pFixed.txDay.genIn(:,2)...
	pFixed.txDay.genOut(:,2)], 'lineWidth', 2)
grid on
title('Power for Low-Cost Spacecraft - Transmit Day (24 Hours)')
xlabel('TIme (s)'), ylabel('Power (W)')
legend('Transmission', 'Idle', 'Solar Panels (Power Gen Orientation)', 'location', 'southeast')